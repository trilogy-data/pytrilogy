 !start: ( block | show_statement )*
    block: statement _TERMINATOR PARSE_COMMENT?
    ?statement: concept
    | datasource
    | function
    | multi_select_statement
    | select_statement
    | persist_statement
    | rowset_derivation_statement
    | import_statement

    | merge_statement_v2
    | rawsql_statement
    
    _TERMINATOR:  ";"i /\s*/
    
    PARSE_COMMENT.1:   /#.*(\n|$)/ |  /\/\/.*\n/  
    
    // property display_name string
    concept_declaration: PURPOSE IDENTIFIER data_type concept_nullable_modifier? metadata?
    //customer_id.property first_name STRING;
    //<customer_id,country>.property local_alias STRING
    concept_property_declaration: PROPERTY (prop_ident | IDENTIFIER) data_type concept_nullable_modifier? metadata?
    //metric post_length <- len(post_text);
    concept_derivation:  (PURPOSE | AUTO | PROPERTY ) (prop_ident | IDENTIFIER) "<-" expr

    rowset_derivation_statement: ("rowset"i IDENTIFIER "<-" (multi_select_statement | select_statement)) | ("with"i IDENTIFIER "as"i (multi_select_statement | select_statement))
    
    constant_derivation: CONST IDENTIFIER "<-" (literal | _constant_functions)

    concept_nullable_modifier: "?"
    concept:  (concept_declaration | concept_derivation | concept_property_declaration | constant_derivation)
    
    //concept property
    prop_ident: "<" IDENTIFIER ("," IDENTIFIER )* ","? ">" "." IDENTIFIER

    // datasource concepts
    datasource: "datasource" IDENTIFIER  "("  column_assignment_list ")"  grain_clause? (address | query) where?
    
    grain_clause: "grain" "(" column_list ")"
    
    address: "address" (QUOTED_ADDRESS | ADDRESS)
    
    query: "query" MULTILINE_STRING
    
    concept_assignment: SHORTHAND_MODIFIER* IDENTIFIER 
    
    //column_assignment
    //figure out if we want static
    column_assignment: (raw_column_assignment | IDENTIFIER |  _static_functions  ) ":" concept_assignment
    
    RAW_ENTRY.1: /raw\s*\(/s

    raw_column_assignment: RAW_ENTRY  MULTILINE_STRING ")"
    
    column_assignment_list : column_assignment (","  column_assignment)* ","?
    
    column_list : (IDENTIFIER "," )* IDENTIFIER ","?
    
    import_statement: "import" (IDENTIFIER ".") * IDENTIFIER "as" IDENTIFIER

    // persist_statement
    persist_statement: "persist"i IDENTIFIER "into"i IDENTIFIER "from"i select_statement grain_clause?

    // select statement
    select_statement: where? "select"i select_list where?  having?  order_by?  limit? 

    // multiple_selects
    multi_select_statement: select_statement ("merge" select_statement)+ "align"i align_clause  where? order_by?  limit? 

    align_item: IDENTIFIER ":" IDENTIFIER ("," IDENTIFIER)*  ","?

    align_clause: align_item ("AND"i align_item)*  "AND"i?

    // merge_v2
    merge_statement_v2: "merge"i  IDENTIFIER "into"i SHORTHAND_MODIFIER? IDENTIFIER 

    // raw sql statement
    rawsql_statement: "raw_sql"i "(" MULTILINE_STRING ")"

    // FUNCTION blocks
    function: raw_function
    function_binding_item: IDENTIFIER ":" data_type
    function_binding_list: function_binding_item ("," function_binding_item )* ","?
    raw_function: "bind" "sql"  IDENTIFIER  "("  function_binding_list ")" "->" data_type "as"i MULTILINE_STRING
    
    // user_id where state = Mexico
    _filter_alt: IDENTIFIER "?" conditional
    _filter_base: "filter"i IDENTIFIER where
    filter_item: _filter_base | _filter_alt



    // rank/lag/lead
    WINDOW_TYPE: ("row_number"i|"rank"i|"lag"i|"lead"i | "sum"i | "avg"i | "max"i | "min"i )  /[\s]+/
    
    window_item: WINDOW_TYPE int_lit? expr  window_item_over? window_item_order?
    
    window_item_over: ("OVER"i over_list)
    
    window_item_order: ("ORDER"i? "BY"i order_list)
    
    select_hide_modifier: "--"
    select_partial_modifier: "~"
    select_item: (select_hide_modifier | select_partial_modifier)? (concept_lit  | select_transform  )
    
    select_list:  select_item ("," select_item )* ","?
    
    //  count(post_id) -> post_count
    _assignment: ("->") | "as"i
    select_transform : expr _assignment IDENTIFIER metadata?
    
    metadata: "metadata" "(" IDENTIFIER "=" _string_lit ")"
    
    limit: "LIMIT"i /[0-9]+/
    
    !window_order: ("TOP"i | "BOTTOM"i)
    
    window: window_order /[0-9]+/
    
    window_order_by: "BY"i column_list
    
    order_list: expr ordering (","  expr ordering)* ","?
    
    over_list: concept_lit (","  concept_lit )* ","?
    
    !ordering: ("ASC"i | "DESC"i ) ("NULLS"i ("FIRST"i | "LAST"i | "AUTO"i) )?
    
    order_by: "ORDER"i "BY"i order_list
    
    //WHERE STATEMENT
    
    !logical_operator: "and"i | "or"i
    
    condition_parenthetical: "(" conditional ")"

    _condition_unit: (expr | condition_parenthetical)

    conditional: _condition_unit (logical_operator _condition_unit)*
    
    where: "WHERE"i conditional
    
    having: "HAVING"i conditional

    !array_comparison: ( ("NOT"i "IN"i) | "IN"i)

    COMPARISON_OPERATOR: (/is[\s]+not/ | "is" |"=" | ">" | "<" | ">=" | "<=" | "!=")
    
    comparison: expr COMPARISON_OPERATOR expr

    between_comparison: expr "between"i expr "and"i expr

    subselect_comparison: expr array_comparison (literal | _constant_functions | _string_functions | concept_lit | filter_item | window_item | unnest | fgroup |  expr_tuple | parenthetical )
    
    expr_tuple: ("("  expr ("," expr)+ ","?  ")") | ("("  expr "," ")")

    parenthetical: "(" expr ")"

    //unnesting is a function
    _UNNEST.1: "UNNEST("i
    unnest: _UNNEST expr ")"
    //indexing into an expression is a function
    index_access: expr "[" int_lit "]"
    map_key_access: expr "[" _string_lit "]"
    attr_access: expr  "." _string_lit 

    expr:  _constant_functions | window_item | filter_item | subselect_comparison | between_comparison |  fgroup |  aggregate_functions | unnest | _static_functions |  literal |  concept_lit  | index_access |  map_key_access | attr_access | parenthetical | expr_tuple | comparison |  alt_like 
    
    // functions
    
    fadd: ("add"i "(" expr "," expr ")" ) | ( expr "+" expr )
    fsub: ("subtract"i "(" expr "," expr ")" ) | ( expr "-" expr )
    fmul: ("multiply"i "(" expr "," expr ")" ) | ( expr "*" expr )
    fdiv: ( "divide"i "(" expr "," expr ")") | ( expr "/" expr )
    fmod: ( "mod"i "(" expr "," (int_lit | concept_lit ) ")") | ( expr "%" (int_lit | concept_lit ) )
    fround: "round"i "(" expr "," expr ")"
    fabs: "abs"i "(" expr ")"
        
    _math_functions: fmul | fdiv | fadd | fsub | fround | fmod | fabs
    
    //generic
    fcast: "cast"i "(" expr "as"i data_type ")"
    concat: ("concat"i "(" (expr ",")* expr ")") | (expr "||" expr)
    fcoalesce: "coalesce"i "(" (expr ",")* expr ")"
    fcase_when: "WHEN"i conditional "THEN"i expr
    fcase_else: "ELSE"i expr
    fcase: "CASE"i (fcase_when)* (fcase_else)? "END"i
    len: "len"i "(" expr ")"
    fnot: "NOT"i expr
    fbool: "bool"i "(" expr ")"

    _generic_functions: fcast | concat | fcoalesce | fcase | len | fnot | fbool

    //constant
    CURRENT_DATE.1: /current_date\(\)/
    CURRENT_DATETIME.1: /current_datetime\(\)/
    fcurrent_date: CURRENT_DATE
    fcurrent_datetime: CURRENT_DATETIME

    _constant_functions: fcurrent_date | fcurrent_datetime
    
    //string
    _LIKE.1: "like("i
    like:  _LIKE expr "," _string_lit ")"
    _ILIKE.1: "ilike("i
    ilike:   _ILIKE expr "," _string_lit ")"
    alt_like: expr  "like"i expr
    _UPPER.1: "upper("i
    upper: _UPPER expr ")"
   _LOWER.1: "lower("i
    lower: _LOWER expr ")"  
    _SPLIT.1: "split("i  
    fsplit: _SPLIT expr "," _string_lit ")"
   _STRPOS.1: "strpos("i
    fstrpos: _STRPOS expr "," expr ")"
    _SUBSTRING.1: "substring("i
    fsubstring: _SUBSTRING expr "," expr "," expr ")"
    
    _string_functions: like | ilike | upper | lower | fsplit | fstrpos | fsubstring 
    
    // special aggregate
    _GROUP.1: "group("i
    fgroup: _GROUP expr ")" aggregate_over?
    //aggregates
    _COUNT.1: "count("i
    count:   _COUNT  expr ")"
    
    count_distinct: "count_distinct"i "(" expr ")"
    
    // avoid conflicts with the window
    _SUM.1: "sum("i
    sum: _SUM expr ")"
    _AVG.1: "avg("i
    avg: _AVG expr ")"
    _MAX.1: "max("i
    max: _MAX expr ")"
    _MIN.1: "min("i
    min: _MIN expr ")"
    
    //aggregates can force a grain
    aggregate_all: "*"
    aggregate_over: ("BY"i (aggregate_all | over_list))
    aggregate_functions: (count | count_distinct | sum | avg | max | min) aggregate_over?

    // date functions
    _DATE.1: "date("i
    fdate:  _DATE expr ")"
    fdatetime: "datetime"i "(" expr ")"
    ftimestamp: "timestamp"i "(" expr ")"
    
    _SECOND.1: "second("i
    fsecond: _SECOND expr ")"
    _MINUTE.1: "minute("i
    fminute: _MINUTE expr ")"
    _HOUR.1: "hour("i
    fhour: _HOUR expr ")"
    _DAY.1: "day("i
    fday:  _DAY expr ")"
    _DAY_OF_WEEK.1: "day_of_week("i
    fday_of_week:  _DAY_OF_WEEK expr ")"
    _WEEK.1: "week("i
    fweek: _WEEK expr ")"
    _MONTH.1: "month("i
    fmonth: _MONTH expr ")"
    _QUARTER.1: "quarter("i
    fquarter: _QUARTER expr ")"
    _YEAR.1: "year("i
    fyear: _YEAR expr ")"
    
    DATE_PART: "DAY"i | "WEEK"i | "MONTH"i | "QUARTER"i | "YEAR"i | "MINUTE"i | "HOUR"i | "SECOND"i
    _DATE_TRUNC.1: "date_trunc("i
    fdate_trunc: _DATE_TRUNC expr "," DATE_PART ")"
    _DATE_PART.1: "date_part("i
    fdate_part: _DATE_PART expr "," DATE_PART ")"
    _DATE_ADD.1: "date_add("i
    fdate_add: _DATE_ADD expr "," DATE_PART "," int_lit ")"
   _DATE_DIFF.1: "date_diff("i
    fdate_diff: _DATE_DIFF expr "," expr "," DATE_PART ")"
    
    _date_functions: fdate | fdate_add | fdate_diff | fdatetime | ftimestamp | fsecond | fminute | fhour | fday | fday_of_week | fweek | fmonth | fquarter | fyear | fdate_part | fdate_trunc
    
    _static_functions:  _string_functions | _math_functions | _generic_functions |  _date_functions

    // base language constructs
    concept_lit: IDENTIFIER
    IDENTIFIER: /[a-zA-Z\_][a-zA-Z0-9\_\-\.\-]*/
    QUOTED_ADDRESS:  /`[a-zA-Z\_][a-zA-Z0-9\_\-\.\-\*\:]*`/
    ADDRESS: IDENTIFIER

    MULTILINE_STRING: /\'{3}(.*?)\'{3}/s
    
    DOUBLE_STRING_CHARS: /(?:(?!\${)([^"\\]|\\.))+/+ // any character except "
    SINGLE_STRING_CHARS: /(?:(?!\${)([^'\\]|\\.))+/+ // any character except '
    _single_quote: "'" ( SINGLE_STRING_CHARS )* "'" 
    _double_quote: "\"" ( DOUBLE_STRING_CHARS )* "\"" 
    _string_lit: _single_quote | _double_quote

    MINUS: "-"

    int_lit: MINUS? /[0-9]+/
    
    float_lit: /[0-9]*\.[0-9]+/

    array_lit: "[" (literal ",")* literal ","? "]"()

    map_lit: "{" (literal ":" literal ",")* literal ":" literal ","? "}"

    _STRUCT.1: "struct("i
    struct_lit: _STRUCT (IDENTIFIER "=" literal ",")* IDENTIFIER "=" literal ","? ")"
    
    !bool_lit: "True"i | "False"i

    !null_lit.1: "null"i
    
    literal: null_lit | _string_lit | int_lit | float_lit | bool_lit | array_lit | map_lit | struct_lit

    MODIFIER: "Optional"i | "Partial"i | "Nullable"i

    SHORTHAND_MODIFIER: "~" | "?"

    struct_type: "struct"i "<" ((data_type | IDENTIFIER) ",")* (data_type | IDENTIFIER) ","? ">" 

    list_type: "list"i "<" data_type ">"

    numeric_type: "numeric"i "(" int_lit "," int_lit ")"

    map_type: "map"i "<" data_type "," data_type ">"

    !data_type: "string"i | "number"i | "numeric"i | "map"i | "list"i | "array"i | "any"i | "int"i | "bigint"i | "date"i | "datetime"i | "timestamp"i | "float"i | "bool"i | numeric_type | map_type | struct_type | list_type
    
    PURPOSE:  "key"i | "metric"i  | CONST
    PROPERTY: "property"i
    CONST: "const"i | "constant"i
    AUTO: "AUTO"i 

    // meta functions
    CONCEPTS: "CONCEPTS"i
    DATASOURCES: "DATASOURCES"i
    show_category: CONCEPTS | DATASOURCES

    show_statement: "show"i ( show_category | select_statement | persist_statement) _TERMINATOR
   COMMENT: /#.*(\n|$)/ |  /\/\/.*\n/  
    %import common.WS
    %ignore WS
    %ignore COMMENT